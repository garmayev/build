<?php

namespace app\modules\notifications\controllers;

use app\modules\notifications\models\Notification;
use app\modules\notifications\services\NotificationService;
use app\modules\notifications\services\TelegramService;
use yii\web\Controller;

class DefaultController extends Controller
{
    public function beforeAction($action)
    {
        if ($action->id == 'callback' || $action->id == 'send') {
            $this->enableCsrfValidation = false;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionSend()
    {
        $model = new Notification();
        $this->layout = '/blank';
        if ($model->load(\Yii::$app->request->post()) && $model->save()) {
            $service = \Yii::$container->get(NotificationService::class);
            $results = $service->send($model);
            \Yii::error($results);
            \Yii::$app->session->setFlash('success', \Yii::t('app', 'Message is sent'));
        } else {
            \Yii::$app->session->setFlash('error', \Yii::t('app', 'Message is not sent'));
            \Yii::error($model->getErrors());
        }

        return $this->render('send', [
            'model' => $model
        ]);
    }

    public function actionWebhook($channel)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

        $service = \Yii::$container->get(NotificationService::class);
        $data = \Yii::$app->request->post();
        $handled = $service->handleCallback($channel, $data);

        return ['success' => $handled];
    }

    public function actionCallback($channel)
    {
        /* @var NotificationService $service */
        $service = \Yii::$container->get(NotificationService::class);
        $data = json_decode(file_get_contents('php://input'), true);
        $handled = $service->handleCallback($channel, $data);
        \Yii::error($handled);
        if ($handled) {
            return $this->asJson($handled);
        }

        throw new \yii\web\BadRequestHttpException(\Yii::t('app', 'Invalid request'));
    }

    public function actionSetTelegramWebhook()
    {
        $telegram = \Yii::$container->get(TelegramService::class);
        $result = $telegram->setWebhook();

        return $this->asJson($result);
    }
}